evaluationDependsOn(':Common')
evaluationDependsOn(':Forge')
evaluationDependsOn(':TestMod-Common')

group = "${APEX_GROUP}.${TEST_MOD_ID}.forge"
version = "${TEST_MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${TEST_MOD_ID}-forge"

configurations {
	common
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	mods {
		"${MOD_ID}" {
			sourceSet project(':Forge').sourceSets.main
		}
	}

	forge {
		mixinConfig "${TEST_MOD_ID}.mixins.json"
		mixinConfig "${TEST_MOD_ID}-common.mixins.json"
	}
}

repositories {
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }
	maven { url 'https://maven.covers1624.net/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	forge "net.minecraftforge:forge:${MINECRAFT_VERSION}-${FORGE_VERSION}"
	modApi "dev.architectury:architectury-forge:${ARCHITECTURY_VERSION}"

	// Main
	common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	implementation(project(path: ':Forge', configuration: 'namedElements')) { transitive false }
	common(project(path: ':TestMod-Common', configuration: 'namedElements')) { transitive false }

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-forge-api:${JEI_VERSION}"
		modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-forge:${JEI_VERSION}"
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FORGE_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FORGE_JADE_CF_FILE_ID}"
	}
}

remapJar {
	enabled = false
}

processResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'META-INF/mods.toml' ]) {
		expand project.properties
	}

	from project(':TestMod-Common').sourceSets.main.resources
}

jar {
	enabled = false
}

sourcesJar {
	enabled = false
}
