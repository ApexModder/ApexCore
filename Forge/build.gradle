plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'

	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'architectury-plugin' version '3.4-SNAPSHOT'
	id 'dev.architectury.loom' version '1.0-SNAPSHOT'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
}

evaluationDependsOn(':Common')

group = "${APEX_GROUP}.${MOD_ID}.forge"
version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${MOD_ID}-forge"

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	silentMojangMappingsLicense()
	accessWidenerPath = project(':Common').loom.accessWidenerPath

	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

		mixinConfig "${MOD_ID}.mixins.json"
		mixinConfig "${MOD_ID}-common.mixins.json"
	}
}

repositories {
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }
	maven { url 'https://maven.covers1624.net/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

	mappings(loom.layered {
		officialMojangMappings()

		if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
			def mcVersion = rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION') ? "${PARCHMENT_MINECRAFT_VERSION}" : "${MINECRAFT_VERSION}"
			parchment("org.parchmentmc.data:parchment-${mcVersion}:${PARCHMENT_MAPPINGS}@zip")
		}
	})

	forge "net.minecraftforge:forge:${MINECRAFT_VERSION}-${FORGE_VERSION}"
	modApi "dev.architectury:architectury-forge:${ARCHITECTURY_VERSION}"

	// Main
	common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	shadowCommon(project(path: ':Common', configuration: 'transformProductionForge')) { transitive false }

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-common-api:${JEI_VERSION}"
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-forge-api:${JEI_VERSION}"
		modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-forge:${JEI_VERSION}"
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FORGE_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FORGE_JADE_CF_FILE_ID}"
	}
}

shadowJar {
	exclude 'fabric.mod.json'
	exclude 'architectury.common.json'
	configurations = [ project.configurations.shadowCommon ]
	classifier ''
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

processResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'META-INF/mods.toml' ]) {
		expand project.properties
	}

	from project(':Common').sourceSets.main.resources
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
		}
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
	}

	withSourcesJar()
}

jar {
	classifier 'slim'

	manifest {
		attributes([
				'Specification-Title': "${MOD_ID}",
				'Specification-Vendor': 'ApexStudios',
				'Specification-Version': '1',
				'Implementation-Title': "${project.name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor': 'ApexStudios',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

sourcesJar {
	def commonSources = project(':Common').sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${project.archivesBaseName}"
			version = "${project.version}"

			from components.java
		}
	}
	repositories {
		maven { url "file:///${rootProject.projectDir}/maven" }

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}

idea.module {
	excludeDirs << file('run')
}
