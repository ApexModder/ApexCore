plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

evaluationDependsOn(':Common')
evaluationDependsOn(':Quilt')
evaluationDependsOn(':TestMod-Common')

group = "${APEX_GROUP}.${TEST_MOD_ID}.quilt"
version = "${TEST_MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${TEST_MOD_ID}-quilt"

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentQuilt.extendsFrom common
}

architectury {
	platformSetupLoomIde()
	loader('quilt')
}

loom {
	mods {
		"${MOD_ID}" {
			sourceSet project(':Quilt').sourceSets.main
		}
	}
}

repositories {
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }
	maven { url 'https://maven.covers1624.net/' }
	maven { url "https://maven.quiltmc.org/repository/release/" }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	// Main
	modImplementation "org.quiltmc:quilt-loader:${QUILT_LOADER_VERSION}"
	modImplementation "org.quiltmc:qsl:${QUILT_LIBRARY_VERSION}+${MINECRAFT_VERSION}"
	modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${QUILT_FABRIC_VERSION}-${MINECRAFT_VERSION}" // Try not to use fabric classes
	modImplementation("dev.architectury:architectury-fabric:${ARCHITECTURY_VERSION}") {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
	}
	common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	implementation(project(path: ':Quilt', configuration: 'namedElements')) { transitive false }
	common(project(path: ':TestMod-Common', configuration: 'namedElements')) { transitive false }
	shadowCommon(project(path: ':TestMod-Common', configuration: 'transformProductionQuilt')) { transitive false }
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-fabric-api:${JEI_VERSION}"
		modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FABRIC_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}"
	}

	// Lazy DFU
	if(rootProject.hasProperty('FABRIC_LAZY_DFU_VERSION')) {
		modRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
	}

	// ModMenu
	if(rootProject.hasProperty('FABRIC_MOD_MENU_VERSION')) {
		modImplementation("com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}") {
			exclude group: 'net.fabricmc'
			exclude group: 'net.fabricmc.fabric-api'
		}
	}
}

shadowJar {
	configurations = [ project.configurations.shadowCommon ]
	classifier 'dev-shadow'
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

processResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'quilt.mod.json' ]) {
		expand project.properties
	}

	from project(':TestMod-Common').sourceSets.main.resources
}

jar {
	classifier 'dev'
}

sourcesJar {
	def commonSources = project(':TestMod-Common').sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
