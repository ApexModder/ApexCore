plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.4-SNAPSHOT' apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

apply plugin: 'base'

ext {
    ACCESS_WIDENER_FILE = file("platforms/common/src/main/resources/${MOD_ID}.accesswidener")
}

architectury {
    minecraft = "${MINECRAFT_VERSION}"
    compileOnly()
    injectInjectables = false
}

afterEvaluate {
    tasks.register('collectJars', Copy) {
        def tasks = subprojects.findAll { !it.name.containsIgnoreCase('common') }.collect { it.tasks.named('remapJar') }
        dependsOn tasks
        from tasks
        into file('jars')
    }

    assemble {
        dependsOn collectJars
    }
}

tasks.register('classes')

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'

    group = "${MOD_GROUP}"
    version = "${MOD_VERSION}.0+${MINECRAFT_VERSION}"
    base.archivesName = "${MOD_ID}"

    sourceSets {
        test {
            java.srcDirs = [ ]
            resources.srcDirs = [ ]
        }
    }

    architectury {
        compileOnly()
        injectInjectables = false
    }

    loom {
        accessWidenerPath = ACCESS_WIDENER_FILE
        mixin.defaultRefmapName = "${MOD_ID}.refmap.json"
        silentMojangMappingsLicense()
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.covers1624.net/' }

        maven {
            url 'https://maven.parchmentmc.org'
            content {
                includeGroupByRegex 'org\\.parchmentmc.*'
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

        mappings(loom.layered {
            officialMojangMappings()

            if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
                if(rootProject.hasProperty('PARCHMENT_DEV_MINECRAFT_VERSION')) {
                    parchment "org.parchmentmc.data:parchment-${PARCHMENT_DEV_MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip"
                } else {
                    parchment "org.parchmentmc.data:parchment-${MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip"
                }
            }
        })
    }

    processResources {
        project.properties.each {
            inputs.property "${it.key}", "${it.value}"
        }

        filesMatching([ '*.mixins.json', 'pack.mcmeta' ]) {
            expand project.properties
        }

        from rootProject.file('changelogs/changelog.md')
        from rootProject.file('LICENSE')
        from rootProject.file('README.MD')
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
        }

        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

        javaToolchains {
            compilerFor {
                languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
            }
        }
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title': "${MOD_ID}",
                    'Specification-Vendor': 'ApexStudios',
                    'Specification-Version': "${MINECRAFT_VERSION}",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${project.version}",
                    'Implementation-Vendor': 'ApexStudios',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    remapJar {
        archiveClassifier = project.name
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        reproducibleFileOrder = true
        preserveFileTimestamps = false
    }
}

idea.module {
    excludeDirs += [
            file('.idea'),
            file('.gradle'),
            file('gradle')
    ]

    [ 'fabric', 'neoforge', 'mcforge' ].forEach {
        if(findProject(":${it}") == null) {
            excludeDirs += [ file("platforms/${it}") ]
        }

        if(findProject(":testmod-${it}") == null) {
            excludeDirs += [ file("testmod/${it}") ]
        }
    }
}