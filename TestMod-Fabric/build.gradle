evaluationDependsOn(':Common')
evaluationDependsOn(':Fabric')
evaluationDependsOn(':TestMod-Common')

group = "${APEX_GROUP}.${TEST_MOD_ID}.fabric"
version = "${TEST_MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${TEST_MOD_ID}-fabric"

sourceSets {
	datagen {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output

		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

configurations {
	common
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	runs {
		data {
			inherit(client)
			source(sourceSets.datagen)
			vmArg('-Dfabric-api.datagen')
			vmArg("-Dfabric-api.datagen.output-dir=${project(':TestMod-Common').file('src/main/generated')}")
			vmArg("-Dfabric-api.datagen.modid=${TEST_MOD_ID}_datagen")
			vmArg('-Dfabric-api.datagen.strict-validation=true')
		}
	}

	mods {
		"${MOD_ID}" {
			sourceSet project(':Fabric').sourceSets.main
		}
	}

	createRemapConfigurations(sourceSets.datagen)
}

repositories {
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }
	maven { url 'https://maven.covers1624.net/' }
	maven { url 'https://maven.shedaniel.me/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	// Main
	modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	modApi "dev.architectury:architectury-fabric:${ARCHITECTURY_VERSION}"
	common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	implementation(project(path: ':Fabric', configuration: 'namedElements')) { transitive false }
	common(project(path: ':TestMod-Common', configuration: 'namedElements')) { transitive false }
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// Data Gen
	modDatagenImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modDatagenImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	datagenImplementation(project(path: ':Fabric', configuration: 'namedElements')) { transitive false }
	datagenImplementation 'com.google.code.findbugs:jsr305:3.0.2'

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-fabric-api:${JEI_VERSION}"
		modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FABRIC_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}"
	}

	// Lazy DFU
	if(rootProject.hasProperty('FABRIC_LAZY_DFU_VERSION')) {
		modRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
		modDatagenRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
	}

	// ModMenu
	if(rootProject.hasProperty('FABRIC_MOD_MENU_VERSION')) {
		modImplementation "com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}"
	}

	// ClothConfig
	if(rootProject.hasProperty('CLOTH_CONFIG_VERSION')) {
		modApi("me.shedaniel.cloth:cloth-config-fabric:${CLOTH_CONFIG_VERSION}") {
			exclude(module: 'fabric-api')
		}
	}
}

remapJar {
	enabled = false
}

processResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json' ]) {
		expand project.properties
	}

	from project(':TestMod-Common').sourceSets.main.resources
}

processDatagenResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json' ]) {
		expand project.properties
	}
}

jar {
	enabled = false
}

sourcesJar {
	enabled = false
}
