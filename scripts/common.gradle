apply plugin: 'org.groovymc.modsdotgroovy'

def forgeProj
def neoProj
def fabricProj

if(project.name.containsIgnoreCase('testmod')) {
    if(findProject(':testmod-fabric') != null) {
        fabricProj = project(':testmod-fabric')
    }

    if(findProject(':testmod-mcforge') != null) {
        forgeProj = project(':testmod-mcforge')
    }

    if(findProject(':testmod-neoforge') != null) {
        neoProj = project(':testmod-neoforge')
    }
} else {
    if(findProject(':fabric') != null) {
        fabricProj = project(':fabric')
    }

    if(findProject(':mcforge') != null) {
        forgeProj = project(':mcforge')
    }

    if(findProject(':neoforge') != null) {
        neoProj = project(':neoforge')
    }
}

modsDotGroovy {
    dslVersion = '1.5.1'
    platform = 'multiloader'

    def forgeProjs = [ ]

    if(forgeProj != null) {
        forgeProjs += forgeProj
    }

    if(neoProj != null) {
        forgeProjs += neoProj
    }

    multiloader {
        common = project
        forge = forgeProjs

        /*if(forgeProj != null) {
            forge = [ forgeProj ]
        }

        if(neoProj != null) {
            neoforge = [ neoProj ]
        }*/

        if(fabricProj != null) {
            fabric = [ fabricProj ]
        }
    }
}

sourceSets {
    main.resources.srcDirs += [ 'src/generated/resources' ]
}

architectury {
    def enabledPlatforms = [ ]

    if(fabricProj != null) {
        enabledPlatforms += 'fabric'
    }

    if(forgeProj != null) {
        enabledPlatforms += 'forge'
    }

    if(neoProj != null) {
        enabledPlatforms += 'neoforge'
    }

    common(enabledPlatforms)
}

dependencies {
    // compileOnly to not be included in maven pom
    compileOnly "org.spongepowered:mixin:${MIXIN_VERSION}"

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
}