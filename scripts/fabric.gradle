apply plugin: 'fabric-loom'

loom {
    if(getRootProject().file("${AW_FILE}").exists()) {
        accessWidenerPath = getRootProject().file("${AW_FILE}")
    }

    mixin.defaultRefmapName = "${MOD_ID}.refmap.json"

    runs {
        client {
            client()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        server {
            server()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        if(getRootProject().hasProperty('DEVLOGIN_VERSION')) {
            clientLogin {
                inherit runs.client
                programArgs '--launch_target', 'net.fabricmc.loader.impl.launch.knot.KnotClient'
                mainClass.set 'net.covers1624.devlogin.DevLogin'

                afterEvaluate {
                    vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
                }
            }
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

    mappings(loom.layered {
        officialMojangMappings()

        if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
            if(rootProject.hasProperty('PARCHMENT_DEV_MINECRAFT_VERSION')) {
                parchment("org.parchmentmc.data:parchment-${PARCHMENT_DEV_MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
            } else {
                parchment("org.parchmentmc.data:parchment-${MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
            }
        }
    })

    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"

    if(rootProject.hasProperty('FABRIC_API_MINECRAFT_VERSION')) {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${FABRIC_API_MINECRAFT_VERSION}"
    } else {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${MINECRAFT_VERSION}"
    }

    compileOnly project(path: ':common', configuration: 'namedElements')

    if(rootProject.hasProperty('DEVLOGIN_VERSION')) {
        localRuntime "net.covers1624:DevLogin:${DEVLOGIN_VERSION}"
    }

    annotationProcessor "io.github.llamalad7:mixinextras-fabric:${MIXIN_EXTRAS_VERSION}"
    implementation "io.github.llamalad7:mixinextras-fabric:${MIXIN_EXTRAS_VERSION}"

    // to stop fabric complaining about missing jetbrains anno classes
    runtimeOnly 'org.jetbrains:annotations:24.0.1'

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
}

collectJars {
    def tasks = [ remapJar, remapSourcesJar ]
    dependsOn tasks
    from tasks
}