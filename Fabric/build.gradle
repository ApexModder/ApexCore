plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'

	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
}

evaluationDependsOn(':Common')

group = "${APEX_GROUP}.${MOD_ID}.fabric"
version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${MOD_ID}-fabric"

sourceSets {
	main {
		resources.srcDirs += 'src/main/generated'
	}

	testmod {
		resources.srcDirs += 'src/testmod/generated'

		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output

		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

loom {
	if(file("src/main/resources/${MOD_ID}.accesswidener").exists()) {
		accessWidenerPath = file("src/main/resources/${MOD_ID}.accesswidener")
	}

	runs {
		client {
			client()
			ideConfigGenerated(true)
			runDir('run')
			source(sourceSets.testmod)
			vmArgs '-Dmixin.debug.export=true'
		}

		server {
			server()
			ideConfigGenerated(true)
			runDir('run')
			source(sourceSets.testmod)
		}
	}

	mods {
		"${MOD_ID}" {
			sourceSet sourceSets.main
			sourceSet project(':Common').sourceSets.main
		}

		"${TEST_MOD_ID}" {
			sourceSet sourceSets.testmod
			sourceSet project(':Common').sourceSets.testmod
		}
	}

	createRemapConfigurations(sourceSets.testmod)
}

repositories {
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

	mappings loom.layered() {
		officialMojangMappings()

		if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
			def mcVersion = rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION') ? "${PARCHMENT_MINECRAFT_VERSION}" : "${MINECRAFT_VERSION}"
			parchment("org.parchmentmc.data:parchment-${mcVersion}:${PARCHMENT_MAPPINGS}@zip")
		}
	}

	// Main
	modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	implementation project(':Common')
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// Test Mod
	modTestmodImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modTestmodImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	testmodImplementation sourceSets.main.output
	testmodImplementation project(':Common')
	testmodImplementation project(':Common').sourceSets.testmod.output
	testmodImplementation 'com.google.code.findbugs:jsr305:3.0.2'

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-common-api:${JEI_VERSION}"
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-fabric-api:${JEI_VERSION}"
		modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"

		modTestmodCompileOnly "mezz.jei:jei-${MINECRAFT_VERSION}-common-api:${JEI_VERSION}"
		modTestmodCompileOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric-api:${JEI_VERSION}"
		modTestmodRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FABRIC_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}"
		modTestmodImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}"
	}

	// Lazy DFU
	if(rootProject.hasProperty('FABRIC_LAZY_DFU_VERSION')) {
		modRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
		modTestmodRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
	}

	// ModMenu
	if(rootProject.hasProperty('FABRIC_MOD_MENU_VERSION')) {
		modImplementation "com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}"
		modTestmodImplementation "com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}"
	}
}

processResources {
	duplicatesStrategy DuplicatesStrategy.WARN

	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json' ]) {
		expand project.properties
	}

	from project(':Common').sourceSets.main.resources
}

processTestmodResources {
	duplicatesStrategy DuplicatesStrategy.WARN

	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json' ]) {
		expand project.properties
	}

	from project(':Common').sourceSets.testmod.resources
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

	if(it.name.equals('compileJava')) {
		source(project(':Common').sourceSets.main.allSource)
	} else if(it.name.equals('compileTestmodJava')) {
		source(project(':Common').sourceSets.testmod.allSource)
	}

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
		}
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
	}

	withSourcesJar()
}

jar {
	manifest {
		attributes([
				'Specification-Title': "${MOD_ID}",
				'Specification-Vendor': 'ApexStudios',
				'Specification-Version': '1',
				'Implementation-Title': "${project.name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor': 'ApexStudios',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

artifacts {
	archives jar
	archives sourcesJar
	archives remapJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${project.archivesBaseName}"
			version = "${project.version}"

			loom.disableDeprecatedPomGeneration(it)

			artifact jar
			artifact sourcesJar
			artifact remapJar
		}
	}
	repositories {
		maven { url "file:///${rootProject.projectDir}/maven" }

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}

idea.module {
	excludeDirs << file('run')
}
