package xyz.apex.minecraft.apexcore.shared.registry;

import com.mojang.serialization.Codec;

import net.minecraft.commands.synchronization.ArgumentTypeInfo;
import net.minecraft.core.Registry;
import net.minecraft.core.particles.ParticleType;
import net.minecraft.network.chat.ChatType;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvent;
import net.minecraft.stats.StatType;
import net.minecraft.util.valueproviders.FloatProviderType;
import net.minecraft.util.valueproviders.IntProviderType;
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.ai.attributes.Attribute;
import net.minecraft.world.entity.ai.memory.MemoryModuleType;
import net.minecraft.world.entity.ai.sensing.SensorType;
import net.minecraft.world.entity.ai.village.poi.PoiType;
import net.minecraft.world.entity.animal.CatVariant;
import net.minecraft.world.entity.animal.FrogVariant;
import net.minecraft.world.entity.decoration.PaintingVariant;
import net.minecraft.world.entity.npc.VillagerProfession;
import net.minecraft.world.entity.npc.VillagerType;
import net.minecraft.world.entity.schedule.Activity;
import net.minecraft.world.entity.schedule.Schedule;
import net.minecraft.world.inventory.MenuType;
import net.minecraft.world.item.Instrument;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.alchemy.Potion;
import net.minecraft.world.item.crafting.RecipeSerializer;
import net.minecraft.world.item.crafting.RecipeType;
import net.minecraft.world.item.enchantment.Enchantment;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraft.world.level.biome.BiomeSource;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.entity.BannerPattern;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.chunk.ChunkGenerator;
import net.minecraft.world.level.chunk.ChunkStatus;
import net.minecraft.world.level.dimension.DimensionType;
import net.minecraft.world.level.dimension.LevelStem;
import net.minecraft.world.level.gameevent.GameEvent;
import net.minecraft.world.level.gameevent.PositionSourceType;
import net.minecraft.world.level.levelgen.DensityFunction;
import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
import net.minecraft.world.level.levelgen.SurfaceRules;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType;
import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
import net.minecraft.world.level.levelgen.carver.WorldCarver;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType;
import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType;
import net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacerType;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType;
import net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerType;
import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPreset;
import net.minecraft.world.level.levelgen.heightproviders.HeightProviderType;
import net.minecraft.world.level.levelgen.placement.PlacedFeature;
import net.minecraft.world.level.levelgen.placement.PlacementModifierType;
import net.minecraft.world.level.levelgen.presets.WorldPreset;
import net.minecraft.world.level.levelgen.structure.Structure;
import net.minecraft.world.level.levelgen.structure.StructureSet;
import net.minecraft.world.level.levelgen.structure.StructureType;
import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType;
import net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType;
import net.minecraft.world.level.levelgen.structure.pools.StructurePoolElementType;
import net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool;
import net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType;
import net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType;
import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorList;
import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType;
import net.minecraft.world.level.levelgen.synth.NormalNoise;
import net.minecraft.world.level.material.Fluid;
import net.minecraft.world.level.storage.loot.entries.LootPoolEntryType;
import net.minecraft.world.level.storage.loot.functions.LootItemFunctionType;
import net.minecraft.world.level.storage.loot.predicates.LootItemConditionType;
import net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType;
import net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType;
import net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType;

import java.util.function.Consumer;

@SuppressWarnings("unused")
public interface RegistryKeys
{
    ResourceKey<? extends Registry<?>> ROOT = vanilla("root");
    ResourceKey<Registry<SoundEvent>> SOUND_EVENT = vanilla("sound_event");
    ResourceKey<Registry<Fluid>> FLUID = vanilla("fluid");
    ResourceKey<Registry<MobEffect>> MOB_EFFECT = vanilla("mob_effect");
    ResourceKey<Registry<Block>> BLOCK = vanilla("block");
    ResourceKey<Registry<Enchantment>> ENCHANTMENT = vanilla("enchantment");
    ResourceKey<Registry<EntityType<?>>> ENTITY_TYPE = vanilla("entity_type");
    ResourceKey<Registry<Item>> ITEM = vanilla("item");
    ResourceKey<Registry<Potion>> POTION = vanilla("potion");
    ResourceKey<Registry<ParticleType<?>>> PARTICLE_TYPE = vanilla("particle_type");
    ResourceKey<Registry<BlockEntityType<?>>> BLOCK_ENTITY_TYPE = vanilla("block_entity_type");
    ResourceKey<Registry<PaintingVariant>> PAINTING_VARIANT = vanilla("painting_variant");
    ResourceKey<Registry<ResourceLocation>> CUSTOM_STAT = vanilla("custom_stat");
    ResourceKey<Registry<ChunkStatus>> CHUNK_STATUS = vanilla("chunk_status");
    ResourceKey<Registry<RuleTestType<?>>> RULE_TEST = vanilla("rule_test");
    ResourceKey<Registry<PosRuleTestType<?>>> POS_RULE_TEST = vanilla("pos_rule_test");
    ResourceKey<Registry<MenuType<?>>> MENU = vanilla("menu");
    ResourceKey<Registry<RecipeType<?>>> RECIPE_TYPE = vanilla("recipe_type");
    ResourceKey<Registry<RecipeSerializer<?>>> RECIPE_SERIALIZER = vanilla("recipe_serializer");
    ResourceKey<Registry<Attribute>> ATTRIBUTE = vanilla("attribute");
    ResourceKey<Registry<GameEvent>> GAME_EVENT = vanilla("game_event");
    ResourceKey<Registry<PositionSourceType<?>>> POSITION_SOURCE_TYPE = vanilla("position_source_type");
    ResourceKey<Registry<StatType<?>>> STAT_TYPE = vanilla("stat_type");
    ResourceKey<Registry<VillagerType>> VILLAGER_TYPE = vanilla("villager_type");
    ResourceKey<Registry<VillagerProfession>> VILLAGER_PROFESSION = vanilla("villager_profession");
    ResourceKey<Registry<PoiType>> POINT_OF_INTEREST_TYPE = vanilla("point_of_interest_type");
    ResourceKey<Registry<MemoryModuleType<?>>> MEMORY_MODULE_TYPE = vanilla("memory_module_type");
    ResourceKey<Registry<SensorType<?>>> SENSOR_TYPE = vanilla("sensor_type");
    ResourceKey<Registry<Schedule>> SCHEDULE = vanilla("schedule");
    ResourceKey<Registry<Activity>> ACTIVITY = vanilla("activity");
    ResourceKey<Registry<LootPoolEntryType>> LOOT_ENTRY = vanilla("loot_pool_entry_type");
    ResourceKey<Registry<LootItemFunctionType>> LOOT_FUNCTION = vanilla("loot_function_type");
    ResourceKey<Registry<LootItemConditionType>> LOOT_ITEM = vanilla("loot_condition_type");
    ResourceKey<Registry<LootNumberProviderType>> LOOT_NUMBER_PROVIDER = vanilla("loot_number_provider_type");
    ResourceKey<Registry<LootNbtProviderType>> LOOT_NBT_PROVIDER = vanilla("loot_nbt_provider_type");
    ResourceKey<Registry<LootScoreProviderType>> LOOT_SCORE_PROVIDER = vanilla("loot_score_provider_type");
    ResourceKey<Registry<ArgumentTypeInfo<?, ?>>> COMMAND_ARGUMENT_TYPE = vanilla("command_argument_type");
    ResourceKey<Registry<DimensionType>> DIMENSION_TYPE = vanilla("dimension_type");
    ResourceKey<Registry<Level>> DIMENSION = vanilla("dimension");
    ResourceKey<Registry<LevelStem>> LEVEL_STEM = vanilla("dimension");
    ResourceKey<Registry<FloatProviderType<?>>> FLOAT_PROVIDER_TYPE = vanilla("float_provider_type");
    ResourceKey<Registry<IntProviderType<?>>> INT_PROVIDER_TYPE = vanilla("int_provider_type");
    ResourceKey<Registry<HeightProviderType<?>>> HEIGHT_PROVIDER_TYPE = vanilla("height_provider_type");
    ResourceKey<Registry<BlockPredicateType<?>>> BLOCK_PREDICATE_TYPE = vanilla("block_predicate_type");
    ResourceKey<Registry<NoiseGeneratorSettings>> NOISE_GENERATOR_SETTINGS = vanilla("worldgen/noise_settings");
    ResourceKey<Registry<ConfiguredWorldCarver<?>>> CONFIGURED_CARVER = vanilla("worldgen/configured_carver");
    ResourceKey<Registry<ConfiguredFeature<?, ?>>> CONFIGURED_FEATURE = vanilla("worldgen/configured_feature");
    ResourceKey<Registry<PlacedFeature>> PLACED_FEATURE = vanilla("worldgen/placed_feature");
    ResourceKey<Registry<Structure>> STRUCTURE = vanilla("worldgen/structure");
    ResourceKey<Registry<StructureSet>> STRUCTURE_SET = vanilla("worldgen/structure_set");
    ResourceKey<Registry<StructureProcessorList>> PROCESSOR_LIST = vanilla("worldgen/processor_list");
    ResourceKey<Registry<StructureTemplatePool>> TEMPLATE_POOL = vanilla("worldgen/template_pool");
    ResourceKey<Registry<Biome>> BIOME = vanilla("worldgen/biome");
    ResourceKey<Registry<NormalNoise.NoiseParameters>> NOISE = vanilla("worldgen/noise");
    ResourceKey<Registry<DensityFunction>> DENSITY_FUNCTION = vanilla("worldgen/density_function");
    ResourceKey<Registry<WorldPreset>> WORLD_PRESET = vanilla("worldgen/world_preset");
    ResourceKey<Registry<FlatLevelGeneratorPreset>> FLAT_LEVEL_GENERATOR_PRESET = vanilla("worldgen/flat_level_generator_preset");
    ResourceKey<Registry<WorldCarver<?>>> CARVER = vanilla("worldgen/carver");
    ResourceKey<Registry<Feature<?>>> FEATURE = vanilla("worldgen/feature");
    ResourceKey<Registry<StructurePlacementType<?>>> STRUCTURE_PLACEMENT_TYPE = vanilla("worldgen/structure_placement");
    ResourceKey<Registry<StructurePieceType>> STRUCTURE_PIECE = vanilla("worldgen/structure_piece");
    ResourceKey<Registry<StructureType<?>>> STRUCTURE_TYPE = vanilla("worldgen/structure_type");
    ResourceKey<Registry<PlacementModifierType<?>>> PLACEMENT_MODIFIER = vanilla("worldgen/placement_modifier_type");
    ResourceKey<Registry<BlockStateProviderType<?>>> BLOCK_STATE_PROVIDER_TYPE = vanilla("worldgen/block_state_provider_type");
    ResourceKey<Registry<FoliagePlacerType<?>>> FOLIAGE_PLACER_TYPE = vanilla("worldgen/foliage_placer_type");
    ResourceKey<Registry<TrunkPlacerType<?>>> TRUNK_PLACER_TYPE = vanilla("worldgen/trunk_placer_type");
    ResourceKey<Registry<TreeDecoratorType<?>>> TREE_DECORATOR_TYPE = vanilla("worldgen/tree_decorator_type");
    ResourceKey<Registry<RootPlacerType<?>>> ROOT_PLACER_TYPE = vanilla("worldgen/root_placer_type");
    ResourceKey<Registry<FeatureSizeType<?>>> FEATURE_SIZE_TYPE = vanilla("worldgen/feature_size_type");
    ResourceKey<Registry<Codec<? extends BiomeSource>>> BIOME_SOURCE = vanilla("worldgen/biome_source");
    ResourceKey<Registry<Codec<? extends ChunkGenerator>>> CHUNK_GENERATOR = vanilla("worldgen/chunk_generator");
    ResourceKey<Registry<Codec<? extends SurfaceRules.ConditionSource>>> CONDITION = vanilla("worldgen/material_condition");
    ResourceKey<Registry<Codec<? extends SurfaceRules.RuleSource>>> RULE = vanilla("worldgen/material_rule");
    ResourceKey<Registry<Codec<? extends DensityFunction>>> DENSITY_FUNCTION_TYPE = vanilla("worldgen/density_function_type");
    ResourceKey<Registry<StructureProcessorType<?>>> STRUCTURE_PROCESSOR = vanilla("worldgen/structure_processor");
    ResourceKey<Registry<StructurePoolElementType<?>>> STRUCTURE_POOL_ELEMENT = vanilla("worldgen/structure_pool_element");
    ResourceKey<Registry<ChatType>> CHAT_TYPE = vanilla("chat_type");
    ResourceKey<Registry<CatVariant>> CAT_VARIANT = vanilla("cat_variant");
    ResourceKey<Registry<FrogVariant>> FROG_VARIANT = vanilla("frog_variant");
    ResourceKey<Registry<BannerPattern>> BANNER_PATTERN = vanilla("banner_pattern");
    ResourceKey<Registry<Instrument>> INSTRUMENT = vanilla("instrument");

    private static <T> ResourceKey<Registry<T>> vanilla(String name)
    {
        return ResourceKey.createRegistryKey(new ResourceLocation(name));
    }

    static void forEach(Consumer<? super ResourceKey<? extends Registry<?>>> consumer)
    {
        consumer.accept(ROOT);
        consumer.accept(SOUND_EVENT);
        consumer.accept(FLUID);
        consumer.accept(MOB_EFFECT);
        consumer.accept(BLOCK);
        consumer.accept(ENCHANTMENT);
        consumer.accept(ENTITY_TYPE);
        consumer.accept(ITEM);
        consumer.accept(POTION);
        consumer.accept(PARTICLE_TYPE);
        consumer.accept(BLOCK_ENTITY_TYPE);
        consumer.accept(PAINTING_VARIANT);
        consumer.accept(CUSTOM_STAT);
        consumer.accept(CHUNK_STATUS);
        consumer.accept(RULE_TEST);
        consumer.accept(POS_RULE_TEST);
        consumer.accept(MENU);
        consumer.accept(RECIPE_TYPE);
        consumer.accept(RECIPE_SERIALIZER);
        consumer.accept(ATTRIBUTE);
        consumer.accept(GAME_EVENT);
        consumer.accept(POSITION_SOURCE_TYPE);
        consumer.accept(STAT_TYPE);
        consumer.accept(VILLAGER_TYPE);
        consumer.accept(VILLAGER_PROFESSION);
        consumer.accept(POINT_OF_INTEREST_TYPE);
        consumer.accept(MEMORY_MODULE_TYPE);
        consumer.accept(SENSOR_TYPE);
        consumer.accept(SCHEDULE);
        consumer.accept(ACTIVITY);
        consumer.accept(LOOT_ENTRY);
        consumer.accept(LOOT_FUNCTION);
        consumer.accept(LOOT_ITEM);
        consumer.accept(LOOT_NUMBER_PROVIDER);
        consumer.accept(LOOT_NBT_PROVIDER);
        consumer.accept(LOOT_SCORE_PROVIDER);
        consumer.accept(COMMAND_ARGUMENT_TYPE);
        consumer.accept(DIMENSION_TYPE);
        consumer.accept(DIMENSION);
        consumer.accept(LEVEL_STEM);
        consumer.accept(FLOAT_PROVIDER_TYPE);
        consumer.accept(INT_PROVIDER_TYPE);
        consumer.accept(HEIGHT_PROVIDER_TYPE);
        consumer.accept(BLOCK_PREDICATE_TYPE);
        consumer.accept(NOISE_GENERATOR_SETTINGS);
        consumer.accept(CONFIGURED_CARVER);
        consumer.accept(CONFIGURED_FEATURE);
        consumer.accept(PLACED_FEATURE);
        consumer.accept(STRUCTURE);
        consumer.accept(STRUCTURE_SET);
        consumer.accept(PROCESSOR_LIST);
        consumer.accept(TEMPLATE_POOL);
        consumer.accept(BIOME);
        consumer.accept(NOISE);
        consumer.accept(DENSITY_FUNCTION);
        consumer.accept(WORLD_PRESET);
        consumer.accept(FLAT_LEVEL_GENERATOR_PRESET);
        consumer.accept(CARVER);
        consumer.accept(FEATURE);
        consumer.accept(STRUCTURE_PLACEMENT_TYPE);
        consumer.accept(STRUCTURE_PIECE);
        consumer.accept(STRUCTURE_TYPE);
        consumer.accept(PLACEMENT_MODIFIER);
        consumer.accept(BLOCK_STATE_PROVIDER_TYPE);
        consumer.accept(FOLIAGE_PLACER_TYPE);
        consumer.accept(TRUNK_PLACER_TYPE);
        consumer.accept(TREE_DECORATOR_TYPE);
        consumer.accept(ROOT_PLACER_TYPE);
        consumer.accept(FEATURE_SIZE_TYPE);
        consumer.accept(BIOME_SOURCE);
        consumer.accept(CHUNK_GENERATOR);
        consumer.accept(CONDITION);
        consumer.accept(RULE);
        consumer.accept(DENSITY_FUNCTION_TYPE);
        consumer.accept(STRUCTURE_PROCESSOR);
        consumer.accept(STRUCTURE_POOL_ELEMENT);
        consumer.accept(CHAT_TYPE);
        consumer.accept(CAT_VARIANT);
        consumer.accept(FROG_VARIANT);
        consumer.accept(BANNER_PATTERN);
        consumer.accept(INSTRUMENT);
    }
}
