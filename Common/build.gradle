plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'

	id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
}

group = "${APEX_GROUP}.${MOD_ID}.shared"
version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${MOD_ID}-shared"

sourceSets {
	main {
		resources.srcDirs += 'src/main/generated'
	}

	testmod {
		resources.srcDirs += 'src/testmod/generated'

		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output

		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

minecraft {
	version("${MINECRAFT_VERSION}")

	if(file("src/main/resources/${MOD_ID}.accesswidener").exists()) {
		accessWideners("src/main/resources/${MOD_ID}.accesswidener")
	}

}

repositories {
	maven { url "file:///${rootProject.projectDir}/maven" }
}

dependencies {
	compileOnly "org.spongepowered:mixin:${MIXIN_VERSION}"

	testmodImplementation sourceSets.main.output
}

processResources {
	duplicatesStrategy DuplicatesStrategy.WARN

	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ 'pack.mcmeta' ]) {
		expand project.properties
	}
}

processTestmodResources {
	duplicatesStrategy DuplicatesStrategy.WARN

	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ 'pack.mcmeta' ]) {
		expand project.properties
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

	if(it.name.equals('compileJava')) {
		source(project(':Common').sourceSets.main.allSource)
	} else if(it.name.equals('compileTestmodJava')) {
		source(project(':Common').sourceSets.testmod.allSource)
	}

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
		}
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
	}

	withSourcesJar()
}

jar {
	manifest {
		attributes([
				'Specification-Title': "${MOD_ID}",
				'Specification-Vendor': 'ApexStudios',
				'Specification-Version': '1',
				'Implementation-Title': "${project.name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor': 'ApexStudios',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

artifacts {
	archives jar
	archives sourcesJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${project.archivesBaseName}"
			version = "${project.version}"

			artifact jar
			artifact sourcesJar
		}
	}
	repositories {
		maven { url "file:///${rootProject.projectDir}/maven" }

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}
